const User = require('./models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const sendEmail = require('../utils/sendEmail');

const JWT_SECRET = process.env.JWT_SECRET;
const CLIENT_URL = process.env.CLIENT_URL;

// REGISTER
exports.register = async (req, res) => {
    try {
        const { name, email, password } = req.body;

        const existingUser = await User.findOne({ email });
        if (existingUser) return res.status(400).json({ message: 'User already exists' });

        const hashedPassword = await bcrypt.hash(password, 10);
        const user = await User.create({ name, email, password: hashedPassword });

        res.status(201).json({ message: 'User registered successfully' });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
};

// LOGIN
exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;

        const user = await User.findOne({ email });
        if (!user) return res.status(400).json({ message: 'Invalid credentials' });

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

        const token = jwt.sign({ id: user._id }, JWT_SECRET, { expiresIn: '1h' });

        res.json({ token, user: { id: user._id, name: user.name, email: user.email } });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
};
// FORGOT PASSWORD
// exports.forgotPassword = async (req, res) => {
//     try {
//         const { email } = req.body;

//         const user = await User.findOne({ email });
//         if (!user) return res.status(404).json({ message: 'User not found' });

//         const token = jwt.sign({ id: user._id }, JWT_SECRET, { expiresIn: '15m' });

//         const url = `${CLIENT_URL}/ResetPassword/${token}`;
//         await sendEmail(email, 'Reset Password', `Click here to reset your password: ${url}`);

//         res.json({ message: 'Reset link sent to your email' });
//     } catch (err) {
//         res.status(500).json({ message: 'Error sending email' });
//     }
// };

// RESET PASSWORD
// exports.resetPassword = async (req, res) => {
//     try {
//         const { token } = req.params;
//         const { password } = req.body;

//         const decoded = jwt.verify(token, JWT_SECRET);
//         const hashedPassword = await bcrypt.hash(password, 10);

//         await User.findByIdAndUpdate(decoded.id, { password: hashedPassword });

//         res.json({ message: 'Password reset successfully' });
//     } catch (err) {
//         res.status(400).json({ message: 'Invalid or expired token' });
//     }
// };
